{"version":3,"sources":["webpack:///webpack/bootstrap 040fb16d0589c6d1d556?b45f","webpack:///./Scripts/server.js","webpack:///external \"React\"?9de9","webpack:///./Scripts/Components/Hello.tsx?8b02","webpack:///./Scripts/Components/index.ts?bc22","webpack:///./Scripts/Components/index.ts"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;ACtCA;;AAEA;AACA;AACA,yC;;;;;;ACJA,wB;;;;;;;;;;ACEA,OAAiB,4BAAc;AAI/B,qBAAgC,MAAU;AAChC;AACI,gBAAC,oBAAG,2BAAiB,KAAM,MAAU,mBAAU,KAAM,MAAW,WAC1E;AACH;;AAJY,SAAK,QAIjB,M;;;;;;ACVD,8G;;;;;;;;;;;;;ACKA,mCAAgC;AAAvB,yBAAuB,M","file":"./wwwroot/server.bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 040fb16d0589c6d1d556\n **/","// Content/server.js\n\n// All JavaScript in here will be loaded server-side\n// Expose components globally so ReactJS.NET can use them\nvar Components = require('expose?Components!./Components');\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./Scripts/server.js\n ** module id = 0\n ** module chunks = 1\n **/","module.exports = React;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"React\"\n ** module id = 1\n ** module chunks = 0 1\n **/","/// <reference path=\"../../typings/index.d.ts\" />\r\n \r\nimport * as React from \"react\";\r\n\r\nexport interface HelloProps { compiler: string; framework: string; }\r\n\r\nexport class Hello extends React.Component<HelloProps, {}> {\r\n    render() {\r\n        return <h1>Hello from {this.props.compiler} and {this.props.framework}!</h1>;\r\n    }\r\n}\n\n\n/** WEBPACK FOOTER **\n ** ./Scripts/Components/Hello.tsx\n **/","module.exports = global[\"Components\"] = require(\"-!D:\\\\P\\\\ReactNetTest\\\\Rnt.Web\\\\node_modules\\\\babel-loader\\\\index.js!D:\\\\P\\\\ReactNetTest\\\\Rnt.Web\\\\node_modules\\\\ts-loader\\\\index.js!D:\\\\P\\\\ReactNetTest\\\\Rnt.Web\\\\Scripts\\\\Components\\\\index.ts\");\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/expose-loader?Components!./Scripts/Components/index.ts\n ** module id = 4\n ** module chunks = 1\n **/","//module.exports = {\n//    // All the components you'd like to render server-side\n//    Hello: require('./Hello')\n//};\n\nexport { Hello } from \"./Hello\";\n\n\n/** WEBPACK FOOTER **\n ** ./Scripts/Components/index.ts\n **/"],"sourceRoot":""}